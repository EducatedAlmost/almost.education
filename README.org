* Ã¦/almost.education

My personal website, written with [[https://github.com/day8/re-frame][re-frame]] in Clojure(script), and hosted on AWS Amplify.

** Structure

- ~core.cljs~ :: initiates the application by mounting the root element
- ~db.cljs~ :: defines initial DB state
- ~events.cljs~ :: effects caused by events
- ~routes.cljs~ :: pages and their routes
- ~styles.cljs~ :: styling, CSS
- ~subs.cljs~ :: link effects to subscriptions
- ~views.cljs~ :: views, and their subscriptions

** Development
:PROPERTIES:
:CUSTOM_ID: development
:END:

*** Running the App
:PROPERTIES:
:CUSTOM_ID: running-the-app
:END:

Start a temporary local web server, build the app with the =dev= profile, and serve the app, browser test runner and karma test runner with hot reload:

#+BEGIN_SRC sh
  npm install
  npx shadow-cljs watch app
#+END_SRC

Please be patient; it may take over 20 seconds to see any output, and over 40 seconds to complete.

When =[:app] Build completed= appears in the output, browse to [[http://localhost:8280/]].

[[https://github.com/thheller/shadow-cljs][~shadow-cljs~]] will automatically push ClojureScript code changes to your browser on save.
To prevent a few common issues, see [[https://code.thheller.com/blog/shadow-cljs/2019/08/25/hot-reload-in-clojurescript.html#things-to-avoid][Hot Reload in ClojureScript: Things to avoid]].

Opening the app in your browser starts a [[https://clojurescript.org/reference/repl#using-the-browser-as-an-evaluation-environment][ClojureScript browser REPL]], to which you may now connect.

*** Running Tests
:PROPERTIES:
:CUSTOM_ID: running-tests
:END:

Build the app with the =prod= profile, start a temporary local web
server, launch headless Chrome/Chromium, run tests, and stop the web
server:

#+BEGIN_SRC sh
  npm install
  npm run ci
#+END_SRC

Please be patient; it may take over 15 seconds to see any output, and
over 25 seconds to complete.

Or, for auto-reload:

#+BEGIN_SRC sh
  npm install
  npm run watch
#+END_SRC

Then in another terminal:

#+BEGIN_SRC sh
  karma start
#+END_SRC

*** Running =shadow-cljs= Actions
:PROPERTIES:
:CUSTOM_ID: running-shadow-cljs-actions
:END:

See a list of
[[https://shadow-cljs.github.io/docs/UsersGuide.html#_command_line][=shadow-cljs CLI=]]
actions:

#+BEGIN_SRC sh
  npx shadow-cljs --help
#+END_SRC

Please be patient; it may take over 10 seconds to see any output. Also
note that some actions shown may not actually be supported, outputting
"Unknown action." when run.

Run a shadow-cljs action on this project's build id (without the colon,
just =app=):

#+BEGIN_SRC sh
  npx shadow-cljs <action> app
#+END_SRC

*** Debug Logging
:PROPERTIES:
:CUSTOM_ID: debug-logging
:END:

The =debug?= variable in
[[file:src/cljs/ae/almost_education/config.cljs][=config.cljs=]]
defaults to =true= in [[#running-the-app][=dev=]] builds, and =false= in
[[#production][=prod=]] builds.

Use =debug?= for logging or other tasks that should run only on =dev=
builds:

#+BEGIN_EXAMPLE
  (ns ae.almost-education.example
    (:require [ae.almost-education.config :as config])

  (when config/debug?
    (println "This message will appear in the browser console only on dev builds."))
#+END_EXAMPLE

** Production
:PROPERTIES:
:CUSTOM_ID: production
:END:

Build the app with the =prod= profile:

#+BEGIN_SRC sh
npm install
npm run release
#+END_SRC

Please be patient; it may take over 15 seconds to see any output, and
over 30 seconds to complete.

The =resources/public/js/compiled= directory is created, containing the
compiled =app.js= and =manifest.edn= files.
